<div class="modal active">
    <div class="modal-overlay">
        <div class="form-register standard-form">
            <h1 class="form-login-title">ĐĂNG KÝ</h1>
            <div class="form-login-group">
                <label for="inputUsername" class="form-login-label">Tên đăng nhập</label>
                <input type="text" class="form-login-control" id="inputUsername" name="username">
                <span class="form-login-message"></span>
            </div>
            <div class="form-login-group">
                <label for="inputPassword" class="form-login-label">Mật khẩu</label>
                <input type="password" class="form-login-control" id="inputPassword" name="password">
                <i class="fa-solid fa-eye password-see"></i>
                <i class="fa-solid fa-eye-slash password-unsee active"></i>
                <span class="form-login-message"></span>
            </div>
            <div class="form-login-group">
                <label for="inputRepassword" class="form-login-label">Nhập lại mật khẩu</label>
                <input type="password" class="form-login-control" id="inputRepassword" name="repassword">
                <span class="form-login-message"></span>
            </div>
            <div class="form-login-btn-group">
                <button class="form-login-btn">Đăng ký</button>
            </div>
        </div>
    </div>
</div>
<script>
    function Validator(option){
        function getParent(element, selector) {
            while(element.parentElement){
                if(element.parentElement.matches(selector)){
                    return element.parentElement;
                }
                element = element.parentElement;
            }
        }
        var selectorRules = {};
        // Hàm validate cho mỗi rule
        function validate(inputElement, rule){
            var rules = selectorRules[rule.selector];
            var errorMessage;
            for(var i = 0; i < rules.length; i++){
                switch(inputElement.type){
                    case "radio":
                    case "checkbox":
                        errorMessage = rules[i](document.querySelector(rule.selector + ':checked'))
                        break;
                    default:
                        errorMessage = rules[i](inputElement.value);
                }
                if(errorMessage) break;
            }
            var messageElement = getParent(inputElement, option.formGroupSelector).querySelector(option.errorSelector);
            if(errorMessage) {
                messageElement.innerText = errorMessage;
                inputElement.classList.add('invalid');
            } else {
                messageElement.innerText = '';
                inputElement.classList.remove('invalid');
            }
            return !errorMessage;
        }
        var formElement = document.querySelector(option.form);
        if(formElement) {
            //Xử lý submit: validate toàn bộ khi có submit, neu k có lỗi thì in ra giá trị input
            formElement.onsubmit = function(e) {
                e.preventDefault();
                var isValidAll = true;
                option.rules.forEach(function(rule) {
                    var inputElement = formElement.querySelector(rule.selector);
                    var isValid = validate(inputElement,rule);
                    if(!isValid) isValidAll = false;
                })
                if(isValidAll) {
                    if(typeof option.onSubmit === 'function') {
                        var formInputs = Array.from(formElement.querySelectorAll('[name]'))
                        var formValues = formInputs.reduce( function(value, input){
                            switch(input.type) {
                                case 'radio':
                                    if(input.matches(':checked')) {
                                        value[input.name] = input.value;
                                    }
                                    break;
                                case 'checkbox':
                                    if(input.matches(':checked')) {
                                        if(Array.isArray(value[input.name])) {
                                            value[input.name].push(input.value);
                                        }
                                        else { 
                                            value[input.name] = [input.value];
                                        }
                                    }
                                    break;
                                case 'file':
                                    value[input.name] = input.files
                                    break;
                                default:
                                    value[input.name] = input.value;
                            }
                            return value;
                        }, {})
                        option.onSubmit(formValues);
                    } else {
                        formElement.submit();
                    }
                }
            }
            option.rules.forEach(function(rule) {
                //Nhóm các rule theo selector
                if(!Array.isArray(selectorRules[rule.selector])) {
                    selectorRules[rule.selector] = [rule.test];
                } else {
                    selectorRules[rule.selector].push(rule.test);
                }

                //Xử lý validate khi blur 
                var inputElements = formElement.querySelectorAll(rule.selector);
                Array.from(inputElements).forEach( function(inputElement) {
                    if(inputElement) {
                        inputElement.onblur = function(){
                            validate(inputElement,rule);
                        }
                        inputElement.oninput = function(){
                            var messageElement = getParent(inputElement,option.formGroupSelector).querySelector(option.errorSelector);
                            messageElement.innerText = '';
                            inputElement.classList.remove('invalid')
                        }
                    }
                })
            })
        }
    }
    Validator.isRequired = function(selector) {
        return {
            selector: selector,
            test: function(value){
                return value ? undefined : 'Vui lòng nhập trường này'
            }
        }
    }
    Validator.isEmail = function(selector) {
        return{ 
            selector: selector,
            test: function(value){
                var regex = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/
                return regex.test(value) ? undefined : 'Vui lòng nhập đúng định dạng email'
            }
        }
    }
    Validator.minLength = function(selector, minLength) {
        return{ 
            selector: selector,
            test: function(value){
                return value.length >= minLength ? undefined : `Vui lòng nhập vào tối thiểu ${minLength} ký tự`
            }
        }
    }
    Validator.isConfirmed = function(selector,confirmValue) {
        return{
            selector: selector,
            test: function(value){
                return value === confirmValue() ? undefined : 'Giá trị nhập vào không chính xác'
            }
        }
    }

    Validator({
        form: '.form-login',
        formGroupSelector: '.form-login-group',
        errorSelector: '.form-login-message',
        rules: [
            Validator.isRequired('#inputUsername'),
            Validator.isRequired('#inputPassword'),
            Validator.minLength('#inputPassword', 6),
            Validator.isRequired('#inputRepassword'),
            Validator.isConfirmed('#inputRepassword', document.querySelector('#inputPassword').value)
        ]
    })

    document.addEventListener('DOMContentLoaded', function(e){
        let passwordSee = $('.password-see')
        let passwordUnsee = $('.password-unsee')
        let passwordInput = $('#inputPassword')
        console.log(passwordInput)
        passwordSee.click(function(e){
            passwordSee.removeClass('active')
            passwordUnsee.addClass('active')
            passwordInput.attr("type", "password")
            
        })
        passwordUnsee.click(function(e){
            passwordSee.addClass('active')
            passwordUnsee.removeClass('active')
            passwordInput.attr("type", "text")
        })

        function setCookie(cname, cvalue, exdays) {
            const d = new Date();
            d.setTime(d.getTime() + (exdays*24*60*60*1000));
            let expires = "expires="+ d.toUTCString();
            document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
        }
        function getCookie(cname) {
            let name = cname + "=";
            let decodedCookie = decodeURIComponent(document.cookie);
            let ca = decodedCookie.split(';');
            for(let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) == ' ') {
                c = c.substring(1);
                }
                if (c.indexOf(name) == 0) {
                return c.substring(name.length, c.length);
                }
            }
            return "";
        }

        $('.form-login-btn').click(function(){
           $.ajax({
                url: '/register', 
                method: 'POST', 
                data: {
                    username: $('#inputUsername').val(),
                    password: $('#inputPassword').val()
                }
                
            })
            .then(data => {
                setCookie('token',data.token, 1)
            })
            .catch(err => console.error(err))
        })
        // --------

    })
</script>